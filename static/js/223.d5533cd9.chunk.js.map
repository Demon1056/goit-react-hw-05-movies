{"version":3,"file":"static/js/223.d5533cd9.chunk.js","mappings":"sRACaA,EAAkBC,EAAAA,GAAAA,IAAH,kEAIfC,EAAWD,EAAAA,GAAAA,IAAH,+CAIRE,EAAeF,EAAAA,GAAAA,EAAH,sEAKZG,EAAaH,EAAAA,GAAAA,GAAH,gDAGVI,EAAcJ,EAAAA,GAAAA,EAAH,gDAGXK,EAASL,EAAAA,GAAAA,IAAH,4L,SCVNM,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpBC,EACND,EADMC,YAAaC,EACnBF,EADmBE,MAAOC,EAC1BH,EAD0BG,aAAcC,EACxCJ,EADwCI,aAAcC,EACtDL,EADsDK,SAAUC,EAChEN,EADgEM,OAE5DC,EAAcC,OAAOC,SAASN,GAC9BO,EAAqBF,OAAOC,SAAwB,GAAfL,GAO3C,OACE,UAACZ,EAAD,WACG,IACAS,GACC,SAACP,EAAD,CACEiB,IAAG,yCAAoCV,GACvCW,IAAKV,KAGP,SAACJ,EAAD,+BAEF,4BACE,UAACF,EAAD,WACGM,EADH,KACYK,EADZ,QAGA,UAACV,EAAD,2BAA2Ba,EAA3B,QACA,SAACf,EAAD,wBACA,SAACE,EAAD,UAAcQ,KACd,SAACV,EAAD,sBACA,uBAxBY,SAAAW,GAEhB,OADoBA,EAAOO,KAAI,qBAAGC,IAAH,IACZC,KAAK,KACzB,CAqBSC,CAAUV,UAIrB,E,SCxCYW,EAAiB,SAAC,GAAsB,IAC3CC,EAD0C,EAAnBlB,aACvBkB,GACFC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,EAAb,SAAwBI,MAAO,CAAEC,KAAMJ,EAASG,MAAMC,MAA9D,qBAIF,yBACE,SAAC,KAAD,CACEF,GAAE,kBAAaH,EAAb,YACFI,MAAO,CAAEC,KAAMJ,EAASG,MAAMC,MAFhC,4BAUT,ECzBYC,GAAa/B,EAAAA,EAAAA,IAAOgC,EAAAA,GAAPhC,CAAH,4R,SC+CvB,EA1CqB,WAAO,IAAD,IACzB,GAAwCiC,EAAAA,EAAAA,UAAS,MAAjD,eAAO1B,EAAP,KAAqB2B,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAQ,qBADGV,EAAAA,EAAAA,MACSE,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAqBzC,OAnBAQ,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAEd,oGAEIC,EAAAA,QAAAA,OAAe,CAAEC,SAAU,eAF/B,UAG0BC,EAAAA,EAAAA,IAAqBR,EAASI,EAAWK,QAHnE,OAGUC,EAHV,OAIIX,EAAgBW,GAJpB,gDAMIC,QAAQC,QANZ,yBAQIN,EAAAA,QAAAA,SARJ,6EAFc,sBAcd,OAdc,mCAadO,GACO,WACLT,EAAWU,OACZ,CACF,GAAE,CAACd,KAGF,iCACE,SAACJ,EAAD,CAAYH,GAAIS,EAAhB,qBACC9B,IACC,2BACG,KACD,SAACD,EAAD,CAAaC,aAAcA,KAC3B,SAACiB,EAAD,CAAgBjB,aAAcA,KAC9B,SAAC,EAAA2C,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,WAMX,C","sources":["components/MainDatails/MainDatails.Styled.js","components/MainDatails/MainDatails.jsx","components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails/MovieDatails.Styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const MainDatailsArea = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n`;\nexport const TitleImg = styled.img`\n  margin-right: 10px;\n`;\n\nexport const DetailsTitle = styled.p`\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nexport const MovieTitle = styled.h3`\n  margin-bottom: 10px;\n`;\nexport const DetailsItem = styled.p`\n  margin-bottom: 10px;\n`;\nexport const ImgBox = styled.div`\n  min-width: 300px;\n  height: 450px;\n  background-color: rosybrown;\n  margin-right: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  MainDatailsArea,\n  TitleImg,\n  DetailsTitle,\n  MovieTitle,\n  DetailsItem,\n  ImgBox,\n} from './MainDatails.Styled';\n\nexport const MainDatails = ({ filmsDatails }) => {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    filmsDatails;\n  const releaseDate = Number.parseInt(release_date);\n  const percentVoteAverage = Number.parseInt(vote_average * 10);\n\n  const getGenres = genres => {\n    const filmsGenres = genres.map(({ name }) => name);\n    return filmsGenres.join(', ');\n  };\n\n  return (\n    <MainDatailsArea>\n      {' '}\n      {poster_path ? (\n        <TitleImg\n          src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n          alt={title}\n        />\n      ) : (\n        <ImgBox>Not Image Found</ImgBox>\n      )}\n      <div>\n        <MovieTitle>\n          {title} ({releaseDate})\n        </MovieTitle>\n        <DetailsItem> User Score: {percentVoteAverage}%</DetailsItem>\n        <DetailsTitle>Overview</DetailsTitle>\n        <DetailsItem>{overview}</DetailsItem>\n        <DetailsTitle>Genres</DetailsTitle>\n        <p>{getGenres(genres)}</p>\n      </div>\n    </MainDatailsArea>\n  );\n};\n\nMainDatails.propTypes = {\n  filmsDatails: PropTypes.object.isRequired,\n};\n","import { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const AdditionalInfo = ({ filmsDatails }) => {\n  const { id } = filmsDatails;\n  const location = useLocation();\n\n  return (\n    <div>\n      <h3>Additional Information</h3>\n      <ul>\n        <li>\n          <Link to={`/movies/${id}/cast`} state={{ from: location.state.from }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link\n            to={`/movies/${id}/reviews`}\n            state={{ from: location.state.from }}\n          >\n            Reviews\n          </Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nAdditionalInfo.propTypes = {\n  filmsDatails: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const GoBackLink = styled(Link)`\n  display: flex;\n  align-item: center;\n  justify-content: center;\n  margin-bottom: 20px;\n  font-size: 20px;\n  padding: 5px;\n  border-radius: 10px;\n  border: 1px solid grey;\n  width: 290px;\n  :hover,\n  :focus {\n    background-color: rosybrown;\n  }\n`;\n","import { Suspense, useEffect, useState } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { MainDatails } from 'components/MainDatails/MainDatails';\nimport { AdditionalInfo } from 'components/AdditionalInfo/AdditionalInfo';\nimport { GoBackLink } from './MovieDatails.Styled';\nimport { requestMoviesDatails } from 'Api';\n\nconst MovieDetails = () => {\n  const [filmsDatails, setFilmsDatails] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n\n  useEffect(() => {\n    const controller = new AbortController();\n    async function updateFilmsDatails() {\n      try {\n        Loading.arrows({ svgColor: ' rosybrown' });\n        const details = await requestMoviesDatails(movieId, controller.signal);\n        setFilmsDatails(details);\n      } catch (error) {\n        console.error();\n      } finally {\n        Loading.remove();\n      }\n    }\n    updateFilmsDatails();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      <GoBackLink to={backLink}>Go back</GoBackLink>\n      {filmsDatails && (\n        <div>\n          {' '}\n          <MainDatails filmsDatails={filmsDatails} />\n          <AdditionalInfo filmsDatails={filmsDatails} />\n          <Suspense fallback={null}>\n            <Outlet />\n          </Suspense>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["MainDatailsArea","styled","TitleImg","DetailsTitle","MovieTitle","DetailsItem","ImgBox","MainDatails","filmsDatails","poster_path","title","release_date","vote_average","overview","genres","releaseDate","Number","parseInt","percentVoteAverage","src","alt","map","name","join","getGenres","AdditionalInfo","id","location","useLocation","to","state","from","GoBackLink","Link","useState","setFilmsDatails","movieId","useParams","backLink","useEffect","controller","AbortController","Loading","svgColor","requestMoviesDatails","signal","details","console","error","updateFilmsDatails","abort","Suspense","fallback"],"sourceRoot":""}