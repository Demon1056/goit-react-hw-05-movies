{"version":3,"file":"static/js/811.628823a3.chunk.js","mappings":"8QACaA,EAAWC,EAAAA,GAAAA,GAAH,8EAKRC,EAAUD,EAAAA,GAAAA,IAAH,yCAGPE,EAAaF,EAAAA,GAAAA,IAAH,yI,kBC6CvB,EAhDa,WACX,OAAwBG,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAEd,oGAEIC,EAAAA,QAAAA,OAAe,CAAEC,SAAU,eAF/B,UAGmCC,EAAAA,EAAAA,IAC7BP,EACAG,EAAWK,QALjB,OAGUC,EAHV,OAOIV,EAAQU,GAPZ,gDASIC,QAAQC,IAAR,MATJ,yBAWIN,EAAAA,QAAAA,SAXJ,6EAFc,sBAiBd,OAjBc,mCAgBdO,GACO,WACLT,EAAWU,OACZ,CACF,GAAE,CAACb,IAqBJ,OAAO,8BAAGF,IAAQ,wBAnBO,SAAAA,GAiBvB,OAhBeA,EAAKgB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,aAC9C,OACE,UAACzB,EAAD,WACGyB,GACC,SAACvB,EAAD,CACEwB,IAAG,yCAAoCD,GACvCE,IAAKL,KAGP,SAACnB,EAAD,+BAEF,uBAAImB,KACJ,uBAAIC,MAVSC,EAalB,GAEF,CACsBI,CAAiBvB,MACzC,C","sources":["components/Cast/Cast.Styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const CastItem = styled.li`\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nexport const CastImg = styled.img`\n  width: 100px;\n`;\nexport const CastImgBox = styled.div`\n  width: 100px;\n  height: 150px;\n  background-color: rosybrown;\n  margin-right: 10px;\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { CastItem, CastImg, CastImgBox } from './Cast.Styled';\nimport { requestMoviesCast } from 'Api';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    async function UpdateCast() {\n      try {\n        Loading.arrows({ svgColor: ' rosybrown' });\n        const castsInformation = await requestMoviesCast(\n          movieId,\n          controller.signal\n        );\n        setCast(castsInformation);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        Loading.remove();\n      }\n    }\n    UpdateCast();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  const createCastMarkup = cast => {\n    const markup = cast.map(({ name, character, id, profile_path }) => {\n      return (\n        <CastItem key={id}>\n          {profile_path ? (\n            <CastImg\n              src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n              alt={name}\n            />\n          ) : (\n            <CastImgBox>not image found</CastImgBox>\n          )}\n          <p>{name}</p>\n          <p>{character}</p>\n        </CastItem>\n      );\n    });\n    return markup;\n  };\n  return <>{cast && <ul>{createCastMarkup(cast)}</ul>}</>;\n};\n\nexport default Cast;\n"],"names":["CastItem","styled","CastImg","CastImgBox","useState","cast","setCast","movieId","useParams","useEffect","controller","AbortController","Loading","svgColor","requestMoviesCast","signal","castsInformation","console","log","UpdateCast","abort","map","name","character","id","profile_path","src","alt","createCastMarkup"],"sourceRoot":""}